import React from 'react';
import type { TokenSeparator } from './types/mix';
import type { SpecialKeyDownConfig } from './types/specialKeyDown';
import type { OnInputValueChange, OnPreprocess, OnBuildTokenValue, OnTokenValueValidate, OnTokenValuesChange, OnGetTokenClassName, OnGetTokenDisplayLabel, OnRenderTokenDeleteButtonContent, OnGetIsTokenEditable, OnGetTokenEditableValue, OnGetTokenErrorMessage } from './types/interfaces';
import type { TokenValue } from './types/token';
declare type Props<ValueType, ErrorType> = {
    style?: React.CSSProperties;
    className?: string;
    readOnly?: boolean;
    autoFocus?: boolean;
    placeholder?: string;
    tokenValues: TokenValue<ValueType>[];
    separators?: TokenSeparator[];
    specialKeyDown?: SpecialKeyDownConfig;
    onInputValueChange?: OnInputValueChange;
    onPreprocess?: OnPreprocess;
    onTokenValueValidate?: OnTokenValueValidate<ValueType, ErrorType>;
    onTokenValuesChange?: OnTokenValuesChange<ValueType>;
    onBuildTokenValue?: OnBuildTokenValue<ValueType>;
    customizeTokenComponent?: React.FunctionComponent;
    onGetTokenClassName?: OnGetTokenClassName<ValueType, ErrorType>;
    onGetTokenDisplayLabel?: OnGetTokenDisplayLabel<ValueType, ErrorType>;
    onRenderTokenDeleteButtonContent?: OnRenderTokenDeleteButtonContent;
    onGetIsTokenEditable?: OnGetIsTokenEditable<ValueType, ErrorType>;
    onGetTokenEditableValue?: OnGetTokenEditableValue<ValueType, ErrorType>;
    onGetTokenErrorMessage?: OnGetTokenErrorMessage<ValueType, ErrorType>;
};
declare const TokenInput: <ValueType, ErrorType>({ className, readOnly, autoFocus, placeholder, tokenValues, separators, specialKeyDown, onInputValueChange, onPreprocess, onTokenValueValidate, onTokenValuesChange, onBuildTokenValue, customizeTokenComponent, onGetTokenClassName, onGetTokenDisplayLabel, onRenderTokenDeleteButtonContent, onGetIsTokenEditable, onGetTokenEditableValue, onGetTokenErrorMessage, ...props }: Props<ValueType, ErrorType>) => JSX.Element;
export default TokenInput;
